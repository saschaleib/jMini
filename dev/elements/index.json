[
	{	"id": "htmlelement_new",
		"name": "HTMLElement.new",
		"namehtml": "<b>HTMLElement.new</b>",
		"type": "static",
		"desc": "Creates a new HTMLElement.",
		"file": "HTMLElement.new",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/new_static.html"
	},
	{	"id": "element_getattr",
		"name": ".getAttr",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>getAttr</b>",
		"type": "prototype",
		"desc": "Returns an attribute value from an HTMLElement.",
		"file": "Element.getAttr",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/getAttr.html"
	},
	{	"id": "element_setattr",
		"name": ".setAttr",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>setAttr</b>",
		"type": "prototype",
		"desc": "Sets an attribute value on an HTMLElement.",
		"file": "Element.setAttr",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/setAttr.html"
	},
	{	"id": "element_appendtext",
		"name": ".appendText",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>appendText</b>",
		"type": "prototype",
		"desc": "Returns the text content of an HTMLElement (including all child elements)",
		"file": "Element.appendText",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/appendText.html"
	},
	{	"id": "element_prependtext",
		"name": ".prependText",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>prependText</b>",
		"type": "prototype",
		"desc": "Sets the text content of an HTMLElement (overwriting any possible existing child nodes)",
		"note": "This function does not attempt to parse HTML content. If you need this, see .html instead.",
		"file": "Element.prependText",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/prependText.html"
	},
	{	"id": "element_gettext",
		"name": ".getText",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>getText</b>",
		"type": "prototype",
		"desc": "Returns the text content of an HTMLElement (including all child elements)",
		"file": "Element.getText",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/getText.html"
	},
	{	"id": "element_settext",
		"name": ".setText",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>setText</b>",
		"type": "prototype",
		"desc": "Sets the text content of an HTMLElement (overwriting any possible existing child nodes)",
		"note": "This function does not attempt to parse HTML content. If you need this, see .html instead.",
		"file": "Element.setText",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/setText.html"
	},
	{	"id": "element_appendnew",
		"name": ".appendNew",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>appendNew</b>",
		"type": "prototype",
		"desc": "creates a new HTMLElement and attaches as a child element (at the end) ",
		"file": "Element.appendNew",
		"requires": ["htmlelement_new"],
		"conflics": [],
		"moreinfo": "elements/appendNew.html"
	},
	{	"id": "element_prependnew",
		"name": ".prependNew",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>prependNew</b>",
		"type": "prototype",
		"desc": "creates a new HTMLElement and attaches as a child element (at the beginning) ",
		"file": "Element.prependNew",
		"requires": ["htmlelement_new"],
		"conflics": [],
		"moreinfo": "elements/prependNew.html"
	},
	{	"id": "element_sethtml",
		"name": ".setHtml",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>setHtml</b>",
		"type": "prototype",
		"desc": "Parses XHTML code and inserts it inside of an existing HTMLElement (possibly replacing existing child nodes).",
		"file": "Element.setHtml",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/setHtml.html"
	},
	{	"id": "element_gethtml",
		"name": ".getHtml",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>getHtml</b>",
		"type": "prototype",
		"desc": "Returns the inner HTML of the HTMLElement (including that from child nodes).",
		"file": "Element.getHtml",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/getHtml.html"
	},
	{	"id": "element_empty",
		"name": ".empty",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>empty</b>",
		"type": "prototype",
		"desc": "Remove all child nodes of the element",
		"file": "Element.empty",
		"requires": [],
		"conflics": [],
		"moreinfo": "elements/empty.html"
	}
]