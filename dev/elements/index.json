[
	{	"id": "htmlelement_new",
		"name": "HTMLElement.new",
		"namehtml": "<b>HTMLElement.new</b>",
		"type": "static",
		"desc": "Creates a new HTMLElement.",
		"file": "HTMLElement.new",
		"variants": [
		  {
			"sig": "HTMLElement.<b>new</b>(<i>&lt;String&gt;</i>)",
			"desc": "Create a new HTMLElement with the passed name.",
			"flags": ["static"],
			"param": [
			  {
				"name": "Name",
				"type": "String",
				"desc": "The name of the HTMLElement to create",
				"required": true
			  }
			],
			"returns": {
				"type": "HTMLElement",
				"desc": "The newly created HTMLElement (or <i>null</i> if the HTMLElement could not be created)"
			}
		  },
		  {
			"sig": "HTMLElement.<b>new</b>(<i>&lt;String&gt;</i>, <i>&lt;Object&gt;</i>)",
			"desc": "Create a new HTMLElement with the passed name and with a set of attributes.",
			"flags": ["static"],
			"param": [
			  {
				"name": "Name",
				"type": "String",
				"desc": "The name of the HTMLElement to create",
				"required": true
			  },
			  {
				"name": "Attributes",
				"type": "Object",
				"desc": "List of attributes (name-value pairs) to add to the HTMLElement",
				"required": true
			  }
			],
			"returns": {
				"type": "HTMLElement",
				"desc": "The newly created HTMLElement (or <i>null</i> if the HTMLElement could not be created)"
			}
		  }
		],
		"size": 107,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/new_static.html"
	},
	{	"id": "htmlelement_getattr",
		"name": ".getAttr",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>getAttr</b>",
		"type": "prototype",
		"desc": "Returns an attribute value from an HTMLElement.",
		"file": "Element.getAttr",
		"variants": [
		  {
			"sig": "<i>&lt;HTMLElement&gt;</i>.<b>getAttr</b>(name <i>&lt;String&gt;</i>)",
			"desc": "Returns the value of an attribute of the HTMLElement.",
			"flags": [],
			"param": [
			  {
				"name": "Name",
				"type": "String",
				"desc": "The name of the attribute to read",
				"required": true
			  }
			],
			"returns": {
				"type": "String",
				"desc": "The value of the attribute (empty string, if not found)"
			}
		  }
		],
		"size": 71,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/getAttr.html"
	},
	{	"id": "htmlelement_setattr",
		"name": ".setAttr",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>setAttr</b>",
		"type": "prototype",
		"desc": "Sets an attribute value on an HTMLElement.",
		"file": "Element.setAttr",
		"variants": [
		  {
			"sig": "<i>&lt;HTMLElement&gt;</i>.<b>setAttr</b>(name <i>&lt;String&gt;</i>, value <i>&lt;String&gt;</i>)",
			"desc": "Sets an attribute value for an HTMLElement.",
			"flags": [],
			"param": [
			  {
				"name": "Name",
				"type": "String",
				"desc": "The name of the attribute to change/create.",
				"required": true
				},
			  {
				"name": "Value",
				"type": "String",
				"desc": "The value to be set.",
				"required": true
			  }
			],
			"returns": {
				"type": "<i>&lt;HTMLElement&gt;</i>",
				"desc": "The (modified) parent HTMLElement."
			}
		  }
		],
		"size": 80,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/setAttr.html"
	},
	{	"id": "htmlelement_appendtext",
		"name": ".appendText",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>appendText</b>",
		"type": "prototype",
		"desc": "Returns the text content of an HTMLElement (including all child elements)",
		"file": "Element.appendText",
		"variants": [
		  { "sig": "<i>&lt;HTMLElement&gt;</i>.<b>appendText</b>(<i>&lt;String&gt;</i>)",
			"desc": "Appends a new text node at the end of the HTMLElement’s content.",
			"flags": [],
			"param": [],
			"returns": {
				"type": "<i>&lt;HTMLElement&gt;</i>",
				"desc": "The (modified) parent HTMLElement."
			}
		  }
		],
		"size": 106,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/appendText.html"
	},
	{	"id": "htmlelement_prependtext",
		"name": ".prependText",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>prependText</b>",
		"type": "prototype",
		"desc": "Sets the text content of an HTMLElement (overwriting any possible existing child nodes)",
		"note": "This function does not attempt to parse HTML content. If you need this, see .html instead.",
		"file": "Element.prependText",
		"variants": [
		  { "sig": "<i>&lt;HTMLElement&gt;</i>.<b>appendText</b>(<i>&lt;String&gt;</i>)",
			"desc": "Prepends a new text node at the beginning of the HTMLElement’s content.",
			"flags": [],
			"param": [],
			"returns": {
				"type": "<i>&lt;HTMLElement&gt;</i>",
				"desc": "The (modified) parent HTMLElement."
			}
		  }
		],
		"size": 85,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/prependText.html"
	},
	{	"id": "htmlelement_gettext",
		"name": ".getText",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>getText</b>",
		"type": "prototype",
		"desc": "Returns the text content of an HTMLElement (including all child elements)",
		"file": "Element.getText",
		"variants": [
		  { "sig": "<i>&lt;HTMLElement&gt;</i>.<b>getText</b>()",
			"desc": "Returns the text content the HTMLElement.",
			"flags": [],
			"param": [],
			"returns": {
				"type": "String",
				"desc": "The text value of the attribute (as returned by <i>textContent</i>)"
			}
		  }
		],
		"size": 66,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/getText.html"
	},
	{	"id": "htmlelement_settext",
		"name": ".setText",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>setText</b>",
		"type": "prototype",
		"desc": "Sets the text content of an HTMLElement (overwriting any possible existing child nodes)",
		"note": "This function does not attempt to parse HTML content. If you need this, see .html instead.",
		"file": "Element.setText",
		"variants": [
		  { "sig": "<i>&lt;HTMLElement&gt;</i>.<b>setText</b>(text <i>&lt;String&gt;</i>)",
			"desc": "Sets the text content of the HTMLElement.",
			"flags": [],
			"param": [
			  {
				"name": "Text",
				"type": "String",
				"desc": "The text content to set.",
				"required": true
				}
			],
			"returns": {
				"type": "<i>&lt;HTMLElement&gt;</i>",
				"desc": "The (modified) parent HTMLElement."
			}
		  }
		],
		"size": 85,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/setText.html"
	},
	{	"id": "htmlelement_appendnew",
		"name": ".appendNew",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>appendNew</b>",
		"type": "prototype",
		"desc": "creates a new HTMLElement and attaches as a child element (at the end) ",
		"file": "Element.appendNew",
		"variants": [
		  {
			"sig": "<i>&lt;HTMLElement&gt;</i>.<b>appendNew</b>(<i>&lt;String&gt;</i>)",
			"desc": "Creates a new HTMLElement and appends it to the parent.",
			"flags": [
			  {
				"name": "name",
				"type": "<i>&lt;String&gt;</i>",
				"desc": "The name of the new HTMLElement to append",
				"required": true
			  }
			],
			"returns": {
				"type": "HTMLElement",
				"desc": "The newly created and appended HTMLElement."
			}
		  }
		],
		"size": 145,
		"requires": ["htmlelement_new"],
		"conflics": [],
		"moreinfo": "docs/elements/appendNew.html"
	},
	{	"id": "htmlelement_prependnew",
		"name": ".prependNew",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>prependNew</b>",
		"type": "prototype",
		"desc": "creates a new HTMLElement and attaches as a child element (at the beginning) ",
		"file": "Element.prependNew",
		"variants": [
		  {
			"sig": "<i>&lt;HTMLElement&gt;</i>.<b>prependNew</b>(<i>&lt;String&gt;</i>)",
			"desc": "Creates a new HTMLElement and prepends it to the parent.",
			"flags": [
			  {
				"name": "name",
				"type": "<i>&lt;String&gt;</i>",
				"desc": "The name of the new HTMLElement to prepend",
				"required": true
			  }
			],
			"returns": {
				"type": "HTMLElement",
				"desc": "The newly created and prepended HTMLElement."
			}
		  }
		],
		"size": 142,
		"requires": ["htmlelement_new"],
		"conflics": [],
		"moreinfo": "docs/elements/prependNew.html"
	},
	{	"id": "htmlelement_sethtml",
		"name": ".setHtml",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>setHtml</b>",
		"type": "prototype",
		"desc": "Parses XHTML code and inserts it inside of an existing HTMLElement (possibly replacing existing child nodes).",
		"file": "Element.setHtml",
		"variants": [
		  {
			"sig": "<i>&lt;HTMLElement&gt;</i>.<b>html</b>(<i>&lt;String&gt;</i>)",
			"desc": "Parses the XHTML code and sets the innerHTML to the result.",
			"flags": [],
			"param": [
			  {
				"name": "xhtml",
				"type": "<i>&lt;String&gt;</i>",
				"desc": "The XHTML code to be parsed.",
				"required": true
			  }
			],
			"returns": {
				"type": "HTMLElement",
				"desc": "The (modified) parent HTMLElement."
			}
		  }
		],
		"size": 204,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/setHtml.html"
	},
	{	"id": "htmlelement_gethtml",
		"name": ".getHtml",
		"namehtml": "<i>&lt;HTMLElement&gt;</i>.<b>getHtml</b>",
		"type": "prototype",
		"desc": "Returns the inner HTML of the HTMLElement (including that from child nodes).",
		"file": "Element.getHtml",
		"variants": [
		  {
			"sig": "<i>&lt;HTMLElement&gt;</i>.<b>getHtml</b>()",
			"desc": "Returns the inner HTML of the parent element.",
			"flags": [],
			"param": [],
			"returns": {
				"type": "String",
				"desc": "The inner HTML as String."
			}
		  }
		],
		"size": 204,
		"requires": [],
		"conflics": [],
		"moreinfo": "docs/elements/getHtml.html"
	}
]